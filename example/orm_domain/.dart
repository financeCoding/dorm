// Generated by build_entities.dart,// rerun this script if you have made changes// to the corresponding server-side Hibernate filepart of orm_domain;@Ref('/bin/entities.user')class User extends ImmutableEntity {	//---------------------------------	//	// Public properties	//	//---------------------------------	//---------------------------------	// id	//---------------------------------	@Property(ID_SYMBOL, 'id')	@Id()	@NotNullable()	@Immutable()	Proxy<int> _id;	static const String ID = 'id';	static const Symbol ID_SYMBOL = const Symbol('orm_domain.User.id');	int get id => _id.value;	set id(int value) => _id.value = notifyPropertyChange(ID_SYMBOL, _id.value, value);	//---------------------------------	// name	//---------------------------------	@Property(NAME_SYMBOL, 'name')	@LabelField()	Proxy<String> _name;	static const String NAME = 'name';	static const Symbol NAME_SYMBOL = const Symbol('orm_domain.User.name');	String get name => _name.value;	set name(String value) => _name.value = notifyPropertyChange(NAME_SYMBOL, _name.value, value);	//---------------------------------	//	// Constructor	//	//---------------------------------	User() : super();}-	Person() : super();}YMBOL, _insertedOn.value, value);	//---------------------------------	// updatedBy	//---------------------------------	@Property(UPDATEDBY_SYMBOL, 'updatedBy')	Proxy<User> _updatedBy;	static const String UPDATEDBY = 'updatedBy';	static const Symbol UPDATEDBY_SYMBOL = const Symbol('orm_domain.MutableEntity.updatedBy');	User get updatedBy => _updatedBy.value;	set updatedBy(User value) => _updatedBy.value = notifyPropertyChange(UPDATEDBY_SYMBOL, _updatedBy.value, value);	//---------------------------------	// updatedOn	//---------------------------------	@Property(UPDATEDON_SYMBOL, 'updatedOn')	Proxy<DateTime> _updatedOn;	static const String UPDATEDON = 'updatedOn';	static const Symbol UPDATEDON_SYMBOL = const Symbol('orm_domain.MutableEntity.updatedOn');	DateTime get updatedOn => _updatedOn.value;	set updatedOn(DateTime value) => _updatedOn.value = notifyPropertyChange(UPDATEDON_SYMBOL, _updatedOn.value, value);	//---------------------------------	//	// Constructor	//	//---------------------------------	MutableEntity() : super();}